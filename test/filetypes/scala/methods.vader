# ==============================================================================
# Methods without parameters.
# ==============================================================================
Given scala (method without parameters):
  /** TODO
   *
   * @return TODO
   */
  def add(): Int = x + y

Do (trigger doge):
  \<C-d>

Expect scala (generated comment with the text 'TODO' and @return tag):
  /** TODO
   *
   * @return TODO
   */
  def add(): Int = x + y

# ==============================================================================
# Methods with parameters.
# ==============================================================================
Given scala (method with parameters):
  def add(x: Int, y: Int): Int = x + y

Do (trigger doge):
  \<C-d>

Expect scala (generated comment with @param and @return tags):
  /** TODO
   *
   * @param x Int TODO
   * @param y Int TODO
   * @return TODO
   */
  def add(x: Int, y: Int): Int = x + y

# ==============================================================================
# Methods with multiple parameter list (currying).
# ==============================================================================
Given scala (method with multiple parameter list):
  def addThenMultiply(x: Int, y: Int)(multiplier: Int): Int = (x + y) * multiplier

  def urlBuilder(ssl: Boolean = true, domainName: String = "some domain value"): (String, String) => String = {
    //
  }

Do (trigger doge):
  \<C-d>
  :10\<CR>
  \<C-d>

Expect scala (generated comment with @param and @return tags):
  /** TODO
   *
   * @param x Int TODO
   * @param y Int TODO
   * @param multiplier Int TODO
   * @return TODO
   */
  def addThenMultiply(x: Int, y: Int)(multiplier: Int): Int = (x + y) * multiplier

  /** TODO
   *
   * @param ssl Boolean TODO
   * @param domainName String TODO
   * @return TODO
   */
  def urlBuilder(ssl: Boolean = true, domainName: String = "some domain value"): (String, String) => String = {
    //
  }

# ==============================================================================
# Methods inside a class.
# ==============================================================================
Given scala (methods being overridden inside a class):
  class Test() {
    override def add(x: Int, y: Int): Int = x + y

    override private def add(x: Int, y: Int): Int = x + y
  }

Do (trigger doge):
  :2\<CR>
  \<C-d>
  :10\<CR>
  \<C-d>

Expect scala (generated comments with @param and @return tags):
  class Test() {
    /** TODO
     *
     * @param x Int TODO
     * @param y Int TODO
     * @return TODO
     */
    override def add(x: Int, y: Int): Int = x + y

    /** TODO
     *
     * @param x Int TODO
     * @param y Int TODO
     * @return TODO
     */
    override private def add(x: Int, y: Int): Int = x + y
  }
