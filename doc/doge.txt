*doge.txt*	[Do]cumentation [Ge]nerator
Kim Koomen                                                              *doge*

==============================================================================
CONTENTS                                                       *doge-contents*
  1. Introduction.................................................|doge-intro|
  2. Configuration...............................................|doge-config|
  3. Functions................................................|doge-functions|
      1. Preprocessors....................................|doge-preprocessors|

==============================================================================
INTRODUCTION                                                      *doge-intro*

We all love documentation because it makes our codebases easier to understand,
yet no one has time to write it in a good and proper way or some might not
even like to write it.

DoGe is a [Do]cumentation [Ge]nerator which will generate instant proper
documentation based on the function declaration. You can simply put your
cursor on a function, press `<C-d>`, add brief descriptions and go on coding!

==============================================================================
CONFIGURATION                                                    *doge-config*

                                                              *g:doge_mapping*
(Default: '<C-d>')

The mapping to trigger DoGe.

                                         *g:doge_mapping_comment_jump_forward*
(Default: '<Tab>')

The mapping to jump forward to the next TODO item in a comment. Required
@settings(g:doge_comment_interactive) to be enabled.

                                        *g:doge_mapping_comment_jump_backward*
(Default: '<S-Tab>')

The mapping to jump backward to the previous TODO item in a comment. Required
@settings(g:doge_comment_interactive) to be enabled.

                                                  *g:doge_comment_todo_suffix*
(Default: 1)

Adds the TODO suffix after every generated parameter.

                                                  *g:doge_comment_interactive*
(Default: 1)

Jumps interactively through all TODO items.

==============================================================================
FUNCTIONS                                                     *doge-functions*

doge#generate()                                              *doge#generate()*
  Generates documentation based on available patterns in b:doge_patterns.

doge#comment#jump_forward()                      *doge#comment#jump_forward()*
  Jumps to the next TODO item in the comment based on the b:doge_interactive
  variable. Requires @settings(g:doge_comment_interactive) to be enabled.

doge#comment#jump_backward()                    *doge#comment#jump_backward()*
  Jumps to the previous TODO item in the comment based on the
  b:doge_interactive variable. Requires @settings(g:doge_comment_interactive)
  to be enabled.

doge#comment#update_interactive_comment_info()
                              *doge#comment#update_interactive_comment_info()*
  This function is trigged by the auto-command TextChangedI and will update
  the b:doge_interactive variable where needed.  Requires
  @settings(g:doge_comment_interactive) to be enabled.

doge#generate#pattern({pattern})                     *doge#generate#pattern()*
  Generates a comment based on a given pattern.

doge#helpers#count({word} [, {lnum_start}, {lnum_end} ])
                                                        *doge#helpers#count()*
  Returns the amount of occurences of a word.

  The 2nd and 3rd arguments, named lnum_start and lnum_end, can be used to
  limit the count in-between a range of lines. Both have to be supplied at the
  same time. When not specified the default value for the range will be '%',
  indicating a full buffer count. NOTE: When lnum_start is a bigger number
  than lnum_end then these values will be flipped to ensure a correct range
  format.

doge#helpers#keyseq({seq})                             *doge#helpers#keyseq()*
  Creates a sequence of keys which can be used as a return value for mappings.
  Useful when returning a dynamic value such as a user-configurable setting.

doge#indent#add({lnum}, {text})                            *doge#indent#add()*
  Indent a string based on a given line its indent.

doge#token#replace({tokens}, {text})                    *doge#token#replace()*
  Replace all tokens in the text parameter based on a given dictionary
  containing all the tokens.

doge#token#extract({text}, {regex}, {regex_group_names})
                                                        *doge#token#extract()*
  Extract all the tokens in a text by creating a dictionary holding key-value
  pairs where the 'key' is the given group name and the 'value' the captured
  value of that group. The regex groups in the 'regex' parameter should be
  symmetrical in length to the 'regex_group_names' parameter.

==============================================================================
PREPROCESSORS                                             *doge-preprocessors*

Preprocess functions are called for specific filetypes when doge is generating
a comment. The following preprocess functions are available:

  doge#preprocessors#<filetype>#tokens(tokens)

  doge#preprocessors#<filetype>#parameter_tokens(tokens)

  doge#preprocessors#<filetype>#insert_position(lnum_insert_pos)


vim:tw=78:ts=8:ft=help:norl:
