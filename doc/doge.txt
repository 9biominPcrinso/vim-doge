*doge.txt*	(Do)cumentation (Ge)nerator
Kim Koomen                                                              *doge*

==============================================================================
CONTENTS                                                       *doge-contents*
  1. Introduction.................................................|doge-intro|
  2. Configuration...............................................|doge-config|
  3. Commands..................................................|doge-commands|
  4. Functions................................................|doge-functions|
      1. Preprocessors....................................|doge-preprocessors|

==============================================================================
INTRODUCTION                                                      *doge-intro*

We all love documentation because it makes our codebases easier to understand,
yet no one has time to write it in a good and proper way.

DoGe is a (Do)cumentation (Ge)nerator which will generate a proper
documentation skeleton based on certain expressions (mainly functions). Simply
put your cursor on a function, press `<Leader>d`, jump quickly through TODO
items using `<Tab>` and `<S-Tab>` to quickly add descriptions and go on
coding!

==============================================================================
CONFIGURATION                                                    *doge-config*

                                                      *g:doge_enable_mappings*
(Default: 1)

Whether or not to enable built-in mappings.

                                                              *g:doge_mapping*
(Default: '<Leader>d')

The mapping to trigger DoGe.

                                                      *g:doge_buffer_mappings*
(Default: 1)

Mappings to jump forward/backward are applied as buffer mappings when
interactive mode starts and removed when it ends.

                                         *g:doge_mapping_comment_jump_forward*
(Default: '<Tab>')

The mapping to jump forward to the next TODO item in a comment. Requires
|g:doge_comment_interactive| to be enabled.

                                        *g:doge_mapping_comment_jump_backward*
(Default: '<S-Tab>')

The mapping to jump backward to the previous TODO item in a comment. Requires
|g:doge_comment_interactive| to be enabled.

                                                  *g:doge_comment_interactive*
(Default: 1)

Jumps interactively through all TODO items in the generated comment.

                                                    *g:doge_comment_jump_wrap*
(Default: 1)

Continue to cycle among placeholders when reaching the start or end.

                                                   *g:doge_comment_jump_modes*
(Default: ['n', 'i', 's'])

Defines the modes in which doge will jump forward and backward when
interactive mode is active. For example: removing 'i' would allow you to use
<Tab> for autocompletion in insert mode.

==============================================================================
COMMANDS                                                       *doge-commands*

:DogeGenerate [N] [doc_standard]                               *:DogeGenerate*
  Command to generate documentation. It accepts a count or a string as
  argument, and it can complete the available doc standards for the current
  buffer.

==============================================================================
FUNCTIONS                                                     *doge-functions*

doge#generate({arg})                                         *doge#generate()*
  Generates documentation based on available patterns in b:doge_patterns.

  arg: Either a count (0 by default) or a string (empty by default).

doge#activate()                                              *doge#activate()*
  Activate doge buffer mappings, if option is set.

doge#deactivate()                                          *doge#deactivate()*
  Deactivate doge mappings and unlet buffer variable. Can print a message with
  the reason of deactivation/termination.

doge#command_complete()                              *doge#command_complete()*
  Return a list of supported doc standards for the current buffer.

doge#comment#jump({direction})                           *doge#comment#jump()*
  Jumps to the previous and next TODO item in the comment based on the
  b:doge_interactive variable. Requires |g:doge_comment_interactive| to be
  enabled. The {direction} can be of the following values: 'forward' |
  'backward'

doge#comment#update_interactive_comment_info()
                              *doge#comment#update_interactive_comment_info()*
  This function is trigged by the auto-command TextChangedI and will update
  the b:doge_interactive variable where needed. Requires
  |g:doge_comment_interactive| to be enabled.

doge#comment#deactivate_when_done()      *doge#comment#deactivate_when_done()*
  This function is trigged by the auto-commands InsertLeave and TextChanged
  and will deactivate doge when there are no more TODO items left. Requires
  |g:doge_comment_interactive| to be enabled.

doge#generate#pattern({pattern})                     *doge#generate#pattern()*
  Generates a comment based on a given pattern.

doge#helpers#count({word} [, {lnum_start}, {lnum_end} ])
                                                        *doge#helpers#count()*
  Returns the amount of occurences of a word.

  The 2nd and 3rd arguments, named lnum_start and lnum_end, can be used to
  limit the count in-between a range of lines. The default value for the range
  will be '%', indicating a full buffer count. NOTE: When lnum_start is a
  bigger number than lnum_end then these values will be flipped to ensure a
  correct range format.

doge#helpers#keyseq({seq})                             *doge#helpers#keyseq()*
  Creates a sequence of keys which can be used as a return value for mappings.
  Useful when returning a dynamic value such as a user-configurable setting.

doge#helpers#placeholder()                        *doge#helpers#placeholder()*
  Generate a placeholder with optionally a context. Optionally, you can pass
  the context using the following example call:

    doge#helpers#placeholder('summary')

  The above will return:

    'TODO<summary>'

  If no context is specified the todo-pattern is returned to search for.

doge#helpers#trim({string})                              *doge#helpers#trim()*
  Helper for compatibility with vim versions without the trim() function.

doge#helpers#generator({generator})                 *doge#helpers#generator()*
  Run a generator which will produce all the parameters and return the output.

doge#indent#add({lnum}, {text})                            *doge#indent#add()*
  Indent a string based on a given line its indent, based on the user setting.

doge#python#file({path}, {args})                          *doge#python#file()*
  Run a python file using the py[3]file command.

doge#token#replace({tokens}, {text})                    *doge#token#replace()*
  Replace all tokens in the text parameter based on a given dictionary
  containing all the tokens.

doge#token#extract({text}, {regex}, {regex_group_names})
                                                        *doge#token#extract()*
  Extract all the tokens in a text by creating a dictionary holding key-value
  pairs where the 'key' is the given group name and the 'value' the captured
  value of that group. The regex groups in the 'regex' parameter should be
  symmetrical in length to the 'regex_group_names' parameter.

==============================================================================
PREPROCESSORS                                             *doge-preprocessors*

Preprocess functions are called for specific filetypes when doge is generating
a comment. The following preprocess functions are available:

  doge#preprocessors#<filetype>#tokens(tokens)

  doge#preprocessors#<filetype>#parameter_tokens(tokens)

  doge#preprocessors#<filetype>#insert_position(lnum_insert_pos)


vim:tw=78:ts=8:ft=help:norl:
