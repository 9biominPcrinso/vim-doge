#!/usr/bin/env bash

vim="$1"
tests="$2"

red='\033[0;31m'
green='\033[0;32m'
nc='\033[0m'

run_file="$(mktemp -t tests_ran.XXXXXXXX)"

function filter-vader-output() {
  local hit_first_vader_line=0
  # When verbose mode is off, suppress output until Vader starts.
  local start_output="$verbose"
  local filtered_data=''

  while read -r; do
    # Search for the first Vader output line.
    # We can try starting tests again if they don't start.
    if ((!hit_first_vader_line)); then
      if [[ "$REPLY" = *'Starting Vader:'* ]]; then
        hit_first_vader_line=1
      fi
    fi

    if ((!start_output)); then
      if ((hit_first_vader_line)); then
        start_output=1
      else
        continue
      fi
    fi

    echo "$REPLY"
  done

  # Note that we managed to get the Vader tests started if we did.
  if ((hit_first_vader_line)); then
    echo 1 > "$run_file"
  fi
}

function color-vader-output() {
  while read -r; do
    if [[ "$REPLY" = *'[EXECUTE] (X)'* ]]; then
      echo -en "$red"
    elif [[ "$REPLY" = *'[EXECUTE]'* ]] || [[ "$REPLY" = *'[  GIVEN]'* ]]; then
      echo -en "$nc"
    fi

    if [[ "$REPLY" = *'Success/Total'* ]]; then
      success="$(echo -n "$REPLY" | grep -o '[0-9]\+/' | head -n1 | cut -d/ -f1)"
      total="$(echo -n "$REPLY" | grep -o '/[0-9]\+' | head -n1 | cut -d/ -f2)"

      if [ "$success" -lt "$total" ]; then
        echo -en "$red"
      else
        echo -en "$green"
      fi

      echo "$REPLY"
      echo -en "$nc"
    else
      echo "$REPLY"
    fi
  done

  echo -en "$nc"
}

echo
echo '========================================'
echo "Running tests for $vim"
echo '========================================'
echo

tries=0

while [ "$tries" -lt 5 ]; do
  tries=$((tries + 1))

  exit_code=0
  set -o pipefail
  docker run \
    -a stderr \
    -e VADER_OUTPUT_FILE=/dev/stderr \
    --rm \
    -v "$PWD:/testplugin" \
    -v "$PWD/test:/home" \
    -w /testplugin "$DOGE_DOCKER_IMAGE" "/vim-build/bin/$vim" \
    -u test/vimrc "+Vader! $tests" 2>&1 | filter-vader-output | color-vader-output || exit_code=$?
      set +o pipefail

      if [ -s "$run_file" ]; then
        break
      fi
    done

    if [ "$tries" -gt 1 ]; then
      echo
      echo "Tried to run tests $tries times"
    fi

    rm "$run_file"

    exit "$exit_code"
